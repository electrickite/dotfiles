__init_prompt() {
    gitStatus() { 
        eval "$1=''"
        eval "$2=''"

        local GIT_BRANCH_SYMBOL='⌥ '
        local GIT_BRANCH_CHANGED_SYMBOL='+'
        local GIT_PUSH_SYMBOL='⇧'
        local GIT_PULL_SYMBOL='⇩'

        command -v git >/dev/null || return

        local gitCommand="env LANG=C git"  
        local branch="$($gitCommand symbolic-ref --short HEAD 2>/dev/null || $gitCommand describe --tags --always 2>/dev/null)"
        [ -n "$branch" ] || return

        local marks

        local isChanged="$($gitCommand status --porcelain)"

        [ -n "$isChanged" ] && marks+=" $GIT_BRANCH_CHANGED_SYMBOL$(echo "$isChanged" | wc -l)"

        # local modified="$(echo "$isChanged" | grep 'M' | wc -l)";
        # local added="$(echo "$isChanged" | grep 'A' | wc -l)";
        # local deleted="$(echo "$isChanged" | grep 'D' | wc -l)";
        # local renamed="$(echo "$isChanged" | grep 'R' | wc -l)";
        # local copied="$(echo "$isChanged" | grep 'C' | wc -l)";
        # local unmerged="$(echo "$isChanged" | grep 'U' | wc -l)";
        # local untracked="$(echo "$isChanged" | grep '?' | wc -l)";
        # local ignored="$(echo "$isChanged" | grep '!' | wc -l)";

        # [ $modified -ne 0 ] && marks+="$modified"M
        # [ $added -ne 0 ] && marks+="$added"A
        # [ $deleted -ne 0 ] && marks+="$deleted"D
        # [ $renamed -ne 0 ] && marks+="$renamed"R
        # [ $copied -ne 0 ] && marks+="$copied"C
        # [ $unmerged -ne 0 ] && marks+="$unmerged"U
        # [ $untracked -ne 0 ] && marks+="$untracked"?
        # [ $ignored -ne 0 ] && marks+="$ignored"!

        local stat="$($gitCommand status --porcelain --branch | grep '^##' | grep -o '\[.\+\]$')"
        local aheadN="$(echo $stat | grep -o 'ahead [[:digit:]]\+' | grep -o '[[:digit:]]\+')"
        local behindN="$(echo $stat | grep -o 'behind [[:digit:]]\+' | grep -o '[[:digit:]]\+')"
		
        [ -n "$aheadN" ] && marks+=" $GIT_PUSH_SYMBOL$aheadN"
        [ -n "$behindN" ] && marks+=" $GIT_PULL_SYMBOL$behindN"

        eval "$2='$marks'"
        eval "$1='($GIT_BRANCH_SYMBOL$branch$marks)'"
        return 
    }

    ps1() {
        local isError=$?
        local PS_SYMBOL='$'
        local PROMPT_FG="\[\033[01;94m\]"
        local ERROR_FG="\[\033[00;31m\]"
        local WARN_FG="\[\033[1;33m\]"
        local ALERT_FG="\[\033[0;31m\]"
        local SUCCESS_FG="\[\033[0;32m\]"
        local COMMON_BG="\[\033[40m\]"
        local RESET="\[\033[0m\]"
        local gitInfo gitMarks

        if [ $isError -eq 0 ]; then
            local consoleColor="$PROMPT_FG"
        else
            local consoleColor="$ERROR_FG"
        fi
		
        PS1="$consoleColor[\u@\h \W]$RESET"

        gitStatus gitInfo gitMarks

        if [ ${#gitMarks} != 0 ]; then
            local branchColor="$WARN_FG"
        else
            local branchColor="$SUCCESS_FG"
        fi

        if shopt -q promptvars; then
            if [ ${#gitInfo} != 0 ]; then
                PS1+="$branchColor${gitInfo}$RESET"
            fi
        else
            PS1+="$ALERT_FG$(gitInfo)$RESET"
        fi
        PS1+="$consoleColor$PS_SYMBOL $RESET"
    }

    if [[ $TERM != linux && ! $PROMPT_COMMAND =~ ps1 ]]; then
        PROMPT_COMMAND="ps1; $PROMPT_COMMAND"
    fi
}

__init_prompt
unset __init_prompt
